#version 330 core

struct Material {
  sampler2D diffuse;
  sampler2D specular;
  float     shininess;
};

struct Attenuation {
  float constant;
  float linear;
  float quadratic;
};

struct Light {
  vec3 position;
  vec3 direction;
  float cutOff;
  float outerCutOff;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;

  Attenuation attenuation;
};

in vec3 normal;
in vec3 fragPos;
in vec2 texCoords;

uniform vec3 viewPos; // is origin / (0, 0, 0), in view coord

uniform Material material;
uniform Light light;

out vec4 FragColor;

void main()
{
  vec3 diffuseColor = vec3(texture(material.diffuse, texCoords));
  vec3 specularColor = vec3(texture(material.specular, texCoords));

  vec3 ambient = light.ambient * diffuseColor;

  vec3 norm = normalize(normal);
  vec3 lightDir = normalize(light.position - fragPos);
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * diff * diffuseColor;

  vec3 viewDir = normalize(viewPos - fragPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * spec * specularColor;

  float theta = dot(lightDir, normalize(-light.direction));
  float epsilon = (light.cutOff - light.outerCutOff);
  float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
  diffuse *= intensity;
  specular *= intensity;

  float lightDistance = length(light.position - fragPos);
  float attenuation = 1.0 / (
    light.attenuation.constant
    + light.attenuation.linear * lightDistance
    + light.attenuation.quadratic * (lightDistance * lightDistance)
  );

  ambient *= attenuation;
  diffuse *= attenuation;
  specular *= attenuation;

  FragColor = vec4(ambient + diffuse + specular, 1.0);
}
